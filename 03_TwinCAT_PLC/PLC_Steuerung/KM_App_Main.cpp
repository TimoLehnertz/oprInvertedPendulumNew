/********************************************************************************************************************************************/
/*                                                                                                                                          */
/*  Source-Datei: KM_App_Main.cpp                                                                                                           */
/*                                                                                                                                          */
/*  Prof. Dr. Lothar Zunker      02.06.2021                                                                                                 */
/*                                                                                                                                          */
/********************************************************************************************************************************************/

/************************************************************* System-Includes **************************************************************/
#include "TcPch.h"
#pragma  hdrstop

/*********************************************************** Anwender-Includes **************************************************************/
#include "KM_App_Main.h"
#include "KM_App_MainAds.h"

using namespace Zunker;                        // aus KM_App_Main.h

/********************************************************************************************************************************************/
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CKM_App_Main
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CKM_App_Main
BEGIN_INTERFACE_MAP                               (CKM_App_Main)
  INTERFACE_ENTRY_ITCOMOBJECT                     ()
  INTERFACE_ENTRY                                 (IID_ITcADI, ITcADI)
  INTERFACE_ENTRY                                 (IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP                                 ()

IMPLEMENT_ITCOMOBJECT                             (CKM_App_Main)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2            (CKM_App_Main)
IMPLEMENT_ITCADI                                  (CKM_App_Main)
IMPLEMENT_ITCWATCHSOURCE                          (CKM_App_Main)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CKM_App_Main 
BEGIN_SETOBJPARA_MAP                              (CKM_App_Main)
  SETOBJPARA_DATAAREA_MAP                         ()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_KM_App_MainDefaultAdsPort, m_DefaultAdsPort)
	SETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	SETOBJPARA_VALUE(PID_KM_App_MainCounter, m_Counter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP                                ()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CKM_App_Main 
BEGIN_GETOBJPARA_MAP                              (CKM_App_Main)
  GETOBJPARA_DATAAREA_MAP                         ()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_KM_App_MainDefaultAdsPort, m_DefaultAdsPort)
	GETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	GETOBJPARA_VALUE(PID_KM_App_MainCounter, m_Counter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
  GETOBJPARA_TYPE_CODE                            (PID_KM_App_MainAdsPort, WORD, *p = AmsGetPort())
END_GETOBJPARA_MAP                                ()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CKM_App_Main
BEGIN_OBJPARAWATCH_MAP                            (CKM_App_Main)
  OBJPARAWATCH_DATAAREA_MAP                       ()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_KM_App_MainCounter, m_Counter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP                              ()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CKM_App_Main
BEGIN_OBJDATAAREA_MAP                             (CKM_App_Main)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_KM_App_MainInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_KM_App_MainOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP                               ()


///////////////////////////////////////////////////////////////////////////////
            CKM_App_Main::CKM_App_Main            () : m_Trace(m_TraceLevelMax, m_spSrv)
  {
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_DefaultAdsPort = 0;
	m_ContextAdsPort = 0;
	m_Counter = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
  //######################################### Labor für Mechatronik ##########################################
  this->KM_GlobalObjects   = new C_KM_GlobalObjects  (&this->m_Inputs, &this->m_Outputs);
  this->KM_Level_A         = new C_KM_Level_A        (this->KM_GlobalObjects);
  //##########################################################################################################
  }
            CKM_App_Main::~CKM_App_Main           () 
  {
  //######################################### Labor für Mechatronik ##########################################
  delete  (this->KM_Level_A);
  delete  (this->KM_GlobalObjects);
  //##########################################################################################################
  }

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI           (CKM_App_Main)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT     CKM_App_Main::SetObjStatePS           (PTComInitDataHdr pInitData)
  {
  m_Trace.Log (tlVerbose, FENTERA);
  HRESULT hr = S_OK;
  IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA    (pInitData);

  //######################################### Labor für Mechatronik ##########################################
  /* feste ADS-Portzuordnung zwischen KernelMode und UserMode über Konstante MyAdsPort in CD_GlobalObjects.h !!! */
  hr = SUCCEEDED(hr) ? InitAmsPort (m_spSrv, MyAdsPort) : hr;
  //##########################################################################################################

  // cleanup on failure
  if (FAILED(hr))
    {
    ShutdownAmsPort ();
    }
  m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
  return hr;
  }
///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT     CKM_App_Main::SetObjStateSO           ()
  {
  m_Trace.Log(tlVerbose, FENTERA);
  HRESULT hr = S_OK;

  // TODO: Add any additional initialization


  // If following call is successful the CycleUpdate method will be called, 
  // possibly even before this method has been left.
  hr = FAILED(hr) ? hr : AddModuleToCaller(); 

  // Cleanup if transition failed at some stage
  if (FAILED(hr))
    {
    RemoveModuleFromCaller(); 
    }
  m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
  return hr;
  }
///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT     CKM_App_Main::SetObjStateOS           ()
  {
  m_Trace.Log(tlVerbose, FENTERA);

  HRESULT hr = S_OK;

  RemoveModuleFromCaller(); 

  m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
  return hr;
  }
///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT     CKM_App_Main::SetObjStateSP           ()
  {
  m_Trace.Log(tlVerbose, FENTERA);

  HRESULT hr = S_OK;
  ShutdownAmsPort();

  m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
  return hr;
  }

///////////////////////////////////////////////////////////////////////////////
HRESULT     CKM_App_Main::AddModuleToCaller       ()
  {
  m_Trace.Log(tlVerbose, FENTERA);

  HRESULT hr = S_OK;
  if ( m_spCyclicCaller.HasOID() )
    {
    if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
      {
      if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
        {
        m_spCyclicCaller = NULL;
        }
      }
    }
  else
    {
    hr = ADS_E_INVALIDOBJID; 
    SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
    }
  m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
  return hr;
  }
VOID        CKM_App_Main::RemoveModuleFromCaller  ()
  {
  m_Trace.Log(tlVerbose, FENTERA);

  if ( m_spCyclicCaller )
    {
    m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
    }
  m_spCyclicCaller  = NULL;
  m_Trace.Log(tlVerbose, FLEAVEA);
  }

///////////////////////////////////////////////////////////////////////////////
///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CKM_App_Main::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
  HRESULT hr = S_OK;

  // handle pending ADS indications and confirmations
  CheckOrders();
  // TODO: Replace the sample with your cyclic code
  //######################################### Labor für Mechatronik ##########################################
  if (this->KM_GlobalObjects->EK1100_EtherCAT_Koppler != nullptr) this->KM_GlobalObjects->EK1100_EtherCAT_Koppler->CycleUpdate ();
  this->KM_Level_A->Cycle_Update    ();
  //##########################################################################################################
  return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
void        CKM_App_Main::AdsReadWriteInd         (AmsAddr& rAddr, ULONG invokeId, ULONG indexGroup, ULONG indexOffset, ULONG cbReadLength, ULONG cbWriteLength, PVOID pWriteData)
  {
  m_Trace.Log (tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, indexGroup=0x%08x, indexOffset=0x%08x, cbReadLength=%d, cbWriteLength=%d, pData=0x%p", m_objId.value, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pWriteData);

  void*   pReadData = nullptr;
  //######################################### Labor für Mechatronik ##########################################
  this->KM_GlobalObjects->KM_Ads->AdsReadWriteIndication (indexGroup, indexOffset, cbReadLength, pReadData, cbWriteLength, pWriteData);
  this->KM_Level_A->AdsReadWriteIndication               (indexGroup, indexOffset);                                                         // indexGroup = ModulAdress; indexOffest = KM_Command !!
  //##########################################################################################################
  AdsReadWriteRes                                  (rAddr, invokeId, ADSERR_NOERR, cbReadLength, pReadData);

  m_Trace.Log (tlVerbose, FLEAVEA);
  }

///////////////////////////////////////////////////////////////////////////////
void        CKM_App_Main::SubmitAdsReadReq        ()
  {
  m_Trace.Log(tlVerbose, FENTERA);

  // m_ContextAdsPort contains the ADS port number of the task associated with context 1
  // amsAddr refers to the ADS port of this task 
  AmsAddr amsAddr (this->AmsGetNetId(), m_ContextAdsPort);
  ULONG   invokeId = 0;
  ULONG   indexGroup = 0;
  ULONG   indexOffset = 0;
  ULONG   cbReadLength = 0;

  int nRes = AdsReadReq (amsAddr, invokeId, indexGroup, indexOffset, cbReadLength);
  if (nRes != ADSERR_NOERR)
    {
    m_Trace.Log(tlError, FNAMEA "AdsReadReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
    }
  else
    {
    m_Trace.Log (tlInfo, FNAMEA "AdsReadReq succeeded");
    }

  m_Trace.Log(tlVerbose, FLEAVEA);
  }
void        CKM_App_Main::AdsReadCon              (AmsAddr& rAddr, ULONG invokeId, ULONG nResult, ULONG cbReadLength, PVOID pReadData)
  {
  m_Trace.Log(tlVerbose, FENTERA "invokeId=%d, nResult=0x%08x, cbReadLength=%d, pReadData=0x%p", invokeId, nResult, cbReadLength, pReadData);

  m_Trace.Log(tlVerbose, FLEAVEA);
  }

///////////////////////////////////////////////////////////////////////////////
void        CKM_App_Main::SubmitAdsWriteReq       ()
  {
  m_Trace.Log(tlVerbose, FENTERA);

  // m_ContextAdsPort contains the ADS port number of the task associated with context 1
  // amsAddr refers to the ADS port of this task 
  AmsAddr amsAddr (this->AmsGetNetId(), m_ContextAdsPort);
  ULONG   invokeId = 0;
  ULONG   indexGroup = 0;
  ULONG   indexOffset = 0;
  ULONG   cbWriteLength = 0;
  PVOID   pWriteData = nullptr;

  int     nRes = AdsWriteReq (amsAddr, invokeId, indexGroup, indexOffset, cbWriteLength, pWriteData);
  if (nRes != ADSERR_NOERR)
    {
    m_Trace.Log (tlError, FNAMEA "AdsWriteReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
    }
  else
    {
    m_Trace.Log (tlInfo, FNAMEA "AdsWriteReq succeeded");
    }
  m_Trace.Log   (tlVerbose, FLEAVEA);
  }
void        CKM_App_Main::AdsWriteCon             (AmsAddr& rAddr, ULONG invokeId, ULONG nResult, ULONG cbWriteLength)
  {
  m_Trace.Log     (tlVerbose, FENTERA "invokeId=%d, nResult=0x%08x, cbWriteLength=%d", invokeId, nResult, cbWriteLength);

  m_Trace.Log     (tlVerbose, FLEAVEA);
  }
